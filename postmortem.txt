Note: our code is in the git repo VoteBoxUI, on the branch BAM_branch2.


First, Bowen and Alicia met with Claudia to discuss what needed to be done from a human factors perspective and to get a walkthrough of the VoteBox UI system. After obtaining a tablet from Jerry and Brian, we first worked on loading in the November 2016 ballot. We used the ballot from precinct 0175, because that is the precinct that Phil Kortum lives in, and the experiment will be run on his porch. Alicia wrote up the xml file for the November 2016 ballot, she wrote a python script (xmlparser.py) that added the xml tags for you. Manmitha figured out that the bash script that ran the app takes the election.xml file on the desktop of the tablet as an attribute. She rewrote the script so that our november.xml file was the one that got loaded into the app. At this point we ran into the problem of changing the main.dart file. We were unfamiliar with dart and with chrome apps, so we didn't know how to make changes to the app. Manmitha and Bowen figured out how to deploy chrome apps, and Alicia learned how to use pub to convert dart to js. Afterwards, Alicia worked on the pagination functionality. She added pagination buttons to VoteBoxUI-htmlSource.html, and added the paging functionality to the main.dart file. Whereas before, the entire ballot would be loaded into the review page, now only the first 25 races are loaded, and if one of the paging buttons is pressed, the corresponding 25 races will be displayed. At the same time, Manmitha and Bowen worked on how to get the app to dynamically load xml files. Manmitha added buttons on the first screen that would correspond to the Rice Research Ballot and the November 2016 Ballot. Before, the app took the xml file as an attribute, they changed background.js so that it looks in the root directory for both xml files and stores both in chrome local storage. That way the app can call either xml files. This makes it easier to add more files if necessary. Then they added the ballot loading functionality to main.dart, so that clicking on the buttons would load the respective xml file. While changing things like the html and dart files could be done on the original deployment of the app, adding this dynamic xml loading functionality required redeploying the chrome app. Manmitha figured out how to deploy a chrome app as an extension and create an appropriate batch file to be able to test the changes we made to the background.js and dart files. Finally Alicia and Manmitha worked on getting the ballot info page to load dynamically. Before, it was hardcoded into VoteBoxUI-htmlSource.html, we debated just having another hardcoded info section and depending on which xml file was loaded the respective info section would become visible. However we decided this wasn't very sustainable, because in the future experiments might require many more than 2 different ballots to be able to run on the VoteBox system. So Alicia added info sections to both election.xml and novemberballot.xml. Then Manmitha and Alicia edited the main.dart and VoteBoxUI-htmlSource.html files so that the info sections would be parsed along with the rest of the xml file and the information would go into a corresponding div.

TO DO:
-There currently is no way for a voter to write-in a candidate. An input box should be added to the UI so that write-ins are possible. This would allow the app to take a String and output it to the review screen.
-Currently the app is a Chrome web app. We think a normal web application is more sustainable. Instead of pulling the xml files from chrome.storage.local the xml files could just be opened from the root directory.
-The system doesn't currently check for non-numerals in the voter ID; also it doesn't actually check the ID yet. Right now, any string of length 5 is accepted. This should be changed so the appropriate verification occurs.
-We think a straight ticket option at the start of the ballot should be implemented. There  should be a button after the introduction screen such that when clicked, all the members of that party are automatically chosen and the voter is taken to the review screen. 
-Lastly, another group did a project on outputting the ballot as a nicely formatted pdf for printing. Their input is a string, where races are delineated by new lines, and race information is separated by semi-colons. We could add some code that outputted the parsed xml in this format so that a paper version of the ballot can be printed.
-According to Jerry and Brian, our paginated review page should be able to print with their updated printing code. This still needs to be tested though.
